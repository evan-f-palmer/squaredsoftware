apply plugin: "java"

sourceCompatibility = 1.6
sourceSets.main.java.srcDirs = [ "src/" ]

project.ext.luaInterpreterMainClassName = "com.squaredsoftware.desktop.luaInterpreter.LuaInterpreter"
project.ext.platformerTest = "com.squaredsoftware.desktop.test.platformer.DesktopLauncher"
project.ext.gamJamMainClassName = "com.squaredsoftware.desktop.gamejam.DesktopLauncher"
project.ext.assetsDir = new File("assets");
project.ext.luaSrcDir = new File("../squaredsoftware-core/src.lua");
project.ext.luaShaderDir = new File("../squaredsoftware-core/shaders");

jarPath =  new File("build/libs/desktop-1.0.jar");

task buildLuaInterpreter(type: Jar) {
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from {configurations.compile.collect {zipTree(it)}}
    from files(project.assetsDir);
    from files(project.luaSrcDir);
 
    manifest {
        attributes 'Main-Class': project.ext.luaInterpreterMainClassName
    }
}
buildLuaInterpreter.dependsOn classes

task runGdxInputTest(dependsOn: classes, type: JavaExec) {
    description 'Runs the gdx input test.'
	main = "com.squaredsoftware.desktop.test.input.GdxInputTest"
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true	
}

task platformerTestDist(type: Jar) {
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from {configurations.compile.collect {zipTree(it)}}
    from files(project.assetsDir);
    from files(project.luaSrcDir);
    from files(project.luaShaderDir);
 
    manifest {
        attributes 'Main-Class': project.platformerTest
    }
}
platformerTestDist.dependsOn classes

task runPlatformerTest(dependsOn: platformerTestDist) << {
	javaexec {
		main="-jar"; 
		standardInput = System.in; 
		ignoreExitValue = true; 
		args jar.archivePath
	}
}

task jamDist(type: Jar) {
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from {configurations.compile.collect {zipTree(it)}}
    from files(project.assetsDir);
    from files(project.luaSrcDir);
    from files(project.luaShaderDir);
 
    manifest {
        attributes 'Main-Class': project.gamJamMainClassName
    }
}
jamDist.dependsOn classes

task runJam(dependsOn: jamDist) << {
	javaexec {
		main="-jar"; 
		standardInput = System.in; 
		ignoreExitValue = true; 
		args jar.archivePath
	}
}

eclipse {
    project {
        name = appName + "-desktop"
        linkedResource name: 'assets', type: '2', location: 'PARENT-1-PROJECT_LOC/android/assets'
    }
}

task afterEclipseImport(description: "Post processing after project generation", group: "IDE") {
  doLast {
    def classpath = new XmlParser().parse(file(".classpath"))
    new Node(classpath, "classpathentry", [ kind: 'src', path: 'assets' ]);
    def writer = new FileWriter(file(".classpath"))
    def printer = new XmlNodePrinter(new PrintWriter(writer))
    printer.setPreserveWhitespace(true)
    printer.print(classpath)
  }
}